<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="环境参数" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="threadgroup.count" elementType="Argument">
            <stringProp name="Argument.name">threadgroup.count</stringProp>
            <stringProp name="Argument.value">${__P(threadgroup.count,20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">线程数</stringProp>
          </elementProp>
          <elementProp name="threadgroup.rampup" elementType="Argument">
            <stringProp name="Argument.name">threadgroup.rampup</stringProp>
            <stringProp name="Argument.value">${__P(threadgroup.rampup,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">线程启动时间</stringProp>
          </elementProp>
          <elementProp name="threadgroup.duration" elementType="Argument">
            <stringProp name="Argument.name">threadgroup.duration</stringProp>
            <stringProp name="Argument.value">${__P(threadgroup.duration,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">持续时间</stringProp>
          </elementProp>
          <elementProp name="threadgroup.loops" elementType="Argument">
            <stringProp name="Argument.name">threadgroup.loops</stringProp>
            <stringProp name="Argument.value">${__P(threadgroup.loops,2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">循环次数</stringProp>
          </elementProp>
          <elementProp name="testcase.env" elementType="Argument">
            <stringProp name="Argument.name">testcase.env</stringProp>
            <stringProp name="Argument.value">${__P(testcase.env,172.16.2.52:9092)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">请求环境</stringProp>
          </elementProp>
          <elementProp name="testcase.type" elementType="Argument">
            <stringProp name="Argument.name">testcase.type</stringProp>
            <stringProp name="Argument.value">${__P(testcase.type,application/json)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">请求类型</stringProp>
          </elementProp>
          <elementProp name="aggregate.user" elementType="Argument">
            <stringProp name="Argument.name">aggregate.user</stringProp>
            <stringProp name="Argument.value">${__P(aggregate.user,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">集合点等待用户数</stringProp>
          </elementProp>
          <elementProp name="aggregate.time" elementType="Argument">
            <stringProp name="Argument.name">aggregate.time</stringProp>
            <stringProp name="Argument.value">${__P(aggregate.time,0)}</stringProp>
            <stringProp name="Argument.desc">超时时间设置</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="think.time" elementType="Argument">
            <stringProp name="Argument.name">think.time</stringProp>
            <stringProp name="Argument.value">${__P(think.time,0)}</stringProp>
            <stringProp name="Argument.desc">思考时间</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="信息头管理器" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">${Content-Type}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ReactFlow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threadgroup.count}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${threadgroup.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1507654887000</longProp>
        <longProp name="ThreadGroup.end_time">1507654887000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${threadgroup.duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="客户自增" enabled="true">
          <stringProp name="CounterConfig.start">20029593</stringProp>
          <stringProp name="CounterConfig.end">20520455</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">customerId</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Event Login" enabled="true"/>
        <hashTree>
          <jmeter.kafka.sampler.KafkaProducerSampler guiclass="jmeter.kafka.sampler.KafkaProducerSamplerGui" testclass="jmeter.kafka.sampler.KafkaProducerSampler" testname="Create Event" enabled="true">
            <stringProp name="Kafka brokers">${testcase.env}</stringProp>
            <stringProp name="Kafka topic">raw_events_from_collector</stringProp>
            <stringProp name="Kafka key">${customerId}</stringProp>
            <stringProp name="Request Data">{
  &quot;ip&quot;: &quot;&quot;,
  &quot;event&quot;: &quot;submit_form&quot;,
  &quot;tag&quot;: &quot;null&quot;,
  &quot;channelType&quot;: &quot;wechat&quot;,
  &quot;channelName&quot;: &quot;性能压测&quot;,
  &quot;targetId&quot;: &quot;9c1b514ede0d45e593f81b1dbb16c64c&quot;,
  &quot;pageId&quot;: &quot;871027da3b294579b44a64e3f9f08987&quot;,
  &quot;customerId&quot;: ${customerId},
  &quot;date&quot;: &quot;${__time(yyyy-MM-dd,)}T${__time(HH:MM:SS,)}Z&quot;,
  &quot;targetName&quot;: &quot;【回归】自定义类的字段是否更新&quot;,
  &quot;utma&quot;: &quot;1663881234.485488923.1149595394.1492602326.1492602407.4&quot;,
  &quot;userId&quot;: &quot;oBcVGs_yP80KJTAFSs8lQvtOULfU&quot;,
  &quot;tenantId&quot;: 313
}</stringProp>
          </jmeter.kafka.sampler.KafkaProducerSampler>
          <hashTree/>
        </hashTree>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="graphiteMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">graphiteMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.graphite.TextGraphiteMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="graphiteHost" elementType="Argument">
                <stringProp name="Argument.name">graphiteHost</stringProp>
                <stringProp name="Argument.value">192.168.2.252</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="graphitePort" elementType="Argument">
                <stringProp name="Argument.name">graphitePort</stringProp>
                <stringProp name="Argument.value">2003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rootMetricsPrefix" elementType="Argument">
                <stringProp name="Argument.name">rootMetricsPrefix</stringProp>
                <stringProp name="Argument.value">jmeter.</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersList" elementType="Argument">
                <stringProp name="Argument.name">samplersList</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">90;95;99</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.graphite.GraphiteBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
          <stringProp name="ConstantTimer.delay">${think.time}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Aggregate" enabled="true">
          <stringProp name="groupSize">${aggregate.user}</stringProp>
          <stringProp name="timeoutInMs">${aggregate.time}</stringProp>
        </SyncTimer>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
