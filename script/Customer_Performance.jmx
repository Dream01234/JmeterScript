<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="公共参数变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="threadgroup.count" elementType="Argument">
            <stringProp name="Argument.name">threadgroup.count</stringProp>
            <stringProp name="Argument.value">${__P(threadgroup.count,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="threadgroup.rampup" elementType="Argument">
            <stringProp name="Argument.name">threadgroup.rampup</stringProp>
            <stringProp name="Argument.value">${__P(threadgroup.rampup,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="threadgroup.duration" elementType="Argument">
            <stringProp name="Argument.name">threadgroup.duration</stringProp>
            <stringProp name="Argument.value">${__P(threadgroup.duration,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Jmeter_Env" elementType="Argument">
            <stringProp name="Argument.name">Jmeter_Env</stringProp>
            <stringProp name="Argument.value">${__P(Jmeter_Env,Test)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Content-Type" elementType="Argument">
            <stringProp name="Argument.name">Content-Type</stringProp>
            <stringProp name="Argument.value">${__P(Content-Type,application/json)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="前置处理器" enabled="true">
        <stringProp name="cacheKey"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">// Array of values that contain the % repartition we want
String values = vars.get(&quot;Jmeter_Env&quot;);
if(values==&quot;Test&quot;) {
    vars.put(&quot;Server&quot;,&quot;customer.service.consul&quot;);
    vars.put(&quot;Port&quot;,&quot;18009&quot;);
    vars.put(&quot;x_tenant_id&quot;,&quot;286&quot;);
}
if(values==&quot;Validation&quot;) {
    vars.put(&quot;Server&quot;,&quot;121.40.166.114&quot;);
    vars.put(&quot;Port&quot;,&quot;8009&quot;);
    vars.put(&quot;x_tenant_id&quot;,&quot;1014&quot;);
}
if(values==&quot;Production&quot;) {
    vars.put(&quot;Server&quot;,&quot;121.40.166.114&quot;);
    vars.put(&quot;Port&quot;,&quot;8009&quot;);
    vars.put(&quot;x_tenant_id&quot;,&quot;1014&quot;);
}
return &quot;:&quot;+value;

http://customer.service.consul:18009/listmemberbatchtasks?x_tenant_id=286</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">${Content-Type}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Customer_Performance" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threadgroup.count}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${threadgroup.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1400877119000</longProp>
        <longProp name="ThreadGroup.end_time">1400877119000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${threadgroup.duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="创建客户" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;email&quot;:&quot;aypxrvumuf@live.com&quot;,&quot;mobile&quot;:&quot;13302163559&quot;,&quot;qq&quot;:&quot;1234566&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Server}</stringProp>
            <stringProp name="HTTPSampler.port">${Port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">customers?x_tenant_id=${x_tenant_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LogOut" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="创建客户" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;email&quot;:&quot;aypxrvumuf@live.com&quot;,&quot;mobile&quot;:&quot;13302163559&quot;,&quot;qq&quot;:&quot;1234566&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Server}</stringProp>
            <stringProp name="HTTPSampler.port">${Port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">customers?x_tenant_id=${x_tenant_id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="kafka" enabled="true"/>
        <hashTree>
          <jmeter.kafka.sampler.KafkaProducerSampler guiclass="jmeter.kafka.sampler.KafkaProducerSamplerGui" testclass="jmeter.kafka.sampler.KafkaProducerSampler" testname="Kafka Producer" enabled="true">
            <stringProp name="Kafka brokers">121.40.160.206:9092</stringProp>
            <stringProp name="Kafka topic">raw_events_from_collector</stringProp>
            <stringProp name="Kafka key">1109609</stringProp>
            <stringProp name="Request Data">{&quot;ip&quot;:&quot;&quot;,&quot;event&quot;:&quot;submit_form&quot;,&quot;tag&quot;:&quot;null&quot;,&quot;channelType&quot;:&quot;wechat&quot;,&quot;channelName&quot;:&quot;红烛学习中心&quot;,&quot;targetId&quot;:&quot;9c1b514ede0d45e593f81b1dbb16c64c&quot;,&quot;pageId&quot;:&quot;871027da3b294579b44a64e3f9f08987&quot;,&quot;customerId&quot;:110449,&quot;date&quot;:&quot;2017-05-17T07:11:50Z&quot;,&quot;targetName&quot;:&quot;【回归】自定义类的字段是否更新&quot;,&quot;utma&quot;:&quot;1663881234.485488923.1149595394.1492602326.1492602407.4&quot;,&quot;userId&quot;:&quot;oBcVGs_yP80KJTAFSs8lQvtOULfU&quot;,&quot;tenantId&quot;:110}</stringProp>
          </jmeter.kafka.sampler.KafkaProducerSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
        <stringProp name="ConstantTimer.delay">500</stringProp>
        <stringProp name="RandomTimer.range">100.0</stringProp>
      </GaussianRandomTimer>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
